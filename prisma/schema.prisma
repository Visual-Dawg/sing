// Docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "sqlite"
  url      = "file:../packages/main/public/masterDB.db"
}

model Track {
  id        Int            @id @default(autoincrement())
  title     String?
  filepath  String         @unique
  playlists PlaylistItem[]

  artistName      Artist? @relation(name: "artist", fields: [artist], references: [name])
  artist          String?
  albumartistName Artist? @relation(name: "albumartist", fields: [albumartist], references: [name])
  albumartist     String?
  albumName       Album?  @relation(name: "album", fields: [album], references: [name])
  album           String?
  coverPath       Cover?  @relation(fields: [cover], references: [filepath])
  cover           String?

  playCount Int? @default(0) // Todo implement play stats
  skipCount Int? @default(0)

  trackNo Int? /// The number of the track in an album. For example: *1* (of 12)
  trackOf Int? /// The total number of tracks in an album. For example: *12* 
  diskNo  Int?
  diskOf  Int?
  year    Int?
  date    String?

  originaldate    String?
  originalyear    Int?
  comment         String? /// Stringified JSON Array
  genre           String? /// Stringified JSON Array
  composer        String? /// Stringified JSON Array
  lyrics          String? /// Stringified JSON Array
  albumsort       String?
  titlesort       String?
  work            String?
  artistsort      String?
  albumartistsort String?
  composersort    String?
  lyricist        String? /// Stringified JSON Array
  writer          String? /// Stringified JSON Array
  conductor       String? /// Stringified JSON Array
  remixer         String? /// Stringified JSON Array
  arranger        String? /// Stringified JSON Array
  engineer        String? /// Stringified JSON Array
  producer        String? /// Stringified JSON Array
  djmixer         String? /// Stringified JSON Array
  mixer           String? /// Stringified JSON Array
  technician      String? /// Stringified JSON Array
  label           String? /// Stringified JSON Array
  grouping        String?
  subtitle        String? /// Stringified JSON Array
  description     String? /// Stringified JSON Array
  longDescription String?
  discsubtitle    String? /// Stringified JSON Array
  totaltracks     String?
  totaldiscs      String?
  movementTotal   Int?
  compilation     Boolean?
  bpm             Float?
  mood            String?
  media           String?
  catalognumber   String? /// Stringified JSON Array
  podcast         Boolean?
  podcasturl      String?
  releasestatus   String?
  releasetype     String? /// Stringified JSON Array
  releasecountry  String?
  script          String?
  language        String?
  copyright       String?
  license         String?
  encodedby       String?
  encodersettings String?
  gapless         Boolean?
  barcode         String?
  isrc            String? /// Stringified JSON Array
  asin            String?

  musicbrainz_recordingid    String?
  musicbrainz_trackid        String?
  musicbrainz_albumid        String?
  musicbrainz_artistid       String? /// Stringified JSON Array
  musicbrainz_albumartistid  String? /// Stringified JSON Array
  musicbrainz_releasegroupid String?
  musicbrainz_workid         String?
  musicbrainz_trmid          String?
  musicbrainz_discid         String?
  acoustid_id                String?
  acoustid_fingerprint       String?
  musicip_puid               String?
  musicip_fingerprint        String?

  website             String?
  performerInstrument String? /// Stringified JSON Array
  averageLevel        Int?
  peakLevel           Int?
  notes               String? /// Stringified JSON Array
  originalalbum       String?
  originalartist      String?

  discogs_artist_id         String? /// Stringified JSON Array
  discogs_release_id        Int?
  discogs_label_id          Int?
  discogs_master_release_id Int?
  discogs_votes             Int?
  discogs_rating            Int?

  replaygain_track_gain_ratio Int?
  replaygain_track_peak_ratio Int?
  replaygain_track_gain       String? /// Stringified JSON Array
  replaygain_track_peak       String? /// Stringified JSON Array
  replaygain_album_gain       String? /// Stringified JSON Array
  replaygain_album_peak       String? /// Stringified JSON Array
  replaygainUndoLeftChannel   Int?
  replaygainUndoRightChannel  Int?
  replaygain_track_minmax     String? /// Stringified JSON Array

  key             String?
  category        String? /// Stringified JSON Array
  keywords        String? /// Stringified JSON Array
  movement        String?
  movementIndexNo Int?
  movementIndexOf Int?
  podcastId       String?
  showMovement    Boolean?
  stik            Int?

  container        String?
  tagTypes         String? /// Stringified JSON Array
  duration         Float?
  bitrate          Float?
  sampleRate       Int?
  bitsPerSample    Int?
  tool             String?
  codec            String?
  codecProfile     String?
  lossless         Boolean?
  numberOfChannels Int?

  numberOfSamples  Int?
  audioMD5         String?
  chapters         String? /// Stringified JSON Array
  creationTime     String?
  modificationTime String?
  trackGain        Float?
  trackPeakLevel   Float?
  albumGain        Float?
}

model Album {
  name        String  @id
  artistEntry Artist? @relation(fields: [artist], references: [name])
  artist      String?
  tracks      Track[] @relation(name: "album")
  coverPath   Cover?  @relation(fields: [cover], references: [filepath])
  cover       String? @unique
}

model Artist {
  name              String  @id
  tracks            Track[] @relation(name: "artist")
  albumartistTracks Track[] @relation(name: "albumartist")
  albums            Album[]
  image             String? /// This is the filepath to the artist image
}

model Cover {
  md5      String  @id
  filepath String  @unique
  album    Album?
  tracks   Track[]

  playlistsThumbnail Playlist[]
}

model Playlist {
  id    Int            @id @default(autoincrement())
  name  String         @unique
  items PlaylistItem[]

  thumbnailCovers Cover[]
}

/// A playlist contains tracks, but it can contain multiple of the same and needs to know their position inside the playlist. Thus we have another type for the playlist items.
model PlaylistItem {
  id    Int   @id @default(autoincrement())
  track Track @relation(fields: [trackID], references: [id])
  index Int

  playlist Playlist @relation(fields: [playlistID], references: [id])

  trackID    Int
  playlistID Int
}
