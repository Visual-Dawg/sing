/* eslint-disable unicorn/prefer-dom-node-text-content */
/* eslint-disable no-await-in-loop */
import "./setupBasicMocks.ts_"

import { fireEvent, render } from "@testing-library/svelte"
import * as E from "fp-ts/lib/Either"
import { get } from "svelte/store"
import { beforeEach, describe, expect, it, vi } from "vitest"

import { TEST_ATTRIBUTES, TEST_IDS as id } from "../src/TestConsts"

import trackFactory from "./factories/trackFactory.ts_"
import mockElectronApi from "./MockElectronApi.ts_"

import type { SvelteComponentDev } from "svelte/internal"
import type { IError, ITrack } from "@sing-types/Types"
import type { Either } from "fp-ts/lib/Either"

const mockedTracks = trackFactory.buildList(35)

vi.stubGlobal("api", mockElectronApi)
vi.mock("@/lib/manager/AudioPlayer")

const { currentTrack, nextTracks } = await import("@/lib/manager/PlayerManager")

let QueueBarComponent: typeof SvelteComponentDev

beforeEach(async () => {
  vitest.resetModules()

  QueueBarComponent = (await import(
    "@/lib/organisms/QueueBar.svelte"
  )) as unknown as typeof SvelteComponentDev
})

describe("with valid data", async () => {
  beforeEach(async () => {
    vitest
      .mocked(window.api.getTracks)
      .mockImplementation(async () => E.right(mockedTracks))
  })

  describe("displays", async () => {
    it("displays upcoming queue items", async () => {
      const { container } = render(QueueBarComponent)
      const elements = container.querySelectorAll(
        TEST_ATTRIBUTES.asQuery.queueNextTracks
      )

      expect(elements.length).toBeGreaterThan(2)
    })

    it("displays no played queue items yet", async () => {
      const { container } = render(QueueBarComponent)
      const elements = container.querySelectorAll(
        TEST_ATTRIBUTES.queuePreviousTracks
      )

      expect(elements.length === 0).toBeTruthy()
    })

    it("displays the 'Play queue' title", async () => {
      const queueBar = render(QueueBarComponent)

      expect(queueBar.getByText("Play queue")).toBeTruthy()
    })

    it("displays the current track", async () => {
      const queueBar = render(QueueBarComponent)

      expect(queueBar.getByTestId(id.queueCurrentTrack)).toBeTruthy()
    })

    it("displays a maximum of 20 upcoming tracks", async () => {
      vitest
        .mocked(window.api.getTracks)
        .mockImplementationOnce(async (): Promise<Either<IError, ITrack[]>> => {
          const data: ITrack[] = Array.from({ length: 21 })
            .fill(mockedTracks)
            .flat() as ITrack[]
          return E.right(data)
        })

      vitest.resetModules()

      QueueBarComponent = (await import(
        "@/lib/organisms/QueueBar.svelte"
      )) as unknown as typeof SvelteComponentDev

      const queueBar = render(QueueBarComponent)

      expect(
        queueBar.container.querySelectorAll(TEST_ATTRIBUTES.queueNextTracks)
          .length <= 20
      ).toBeTruthy()
    })

    it("displays the current track correctly", async () => {
      const queueBar = render(QueueBarComponent)
      const currentTrackElement = queueBar.getByTestId(id.queueCurrentTrack)

      const currentTrackData = get(currentTrack)

      expect(() =>
        currentTrackElement.innerText.includes(
          currentTrackData.track.title ||
            currentTrackData.track.filepath.split("/").at(-1) ||
            "Track title is string and empty!!" // should not match
        )
      ).toBeTruthy()
      expect(() =>
        currentTrackElement.innerText.includes(
          currentTrackData.track.artist || "Unknown" // Unknown should never match with the current test data
        )
      ).toBeTruthy()
    })

    it("has one current track", async () => {
      const queueBar = render(QueueBarComponent)
      const { container } = queueBar

      expect(
        container.querySelectorAll(id.asQuery.queueCurrentTrack),
        "There is more than one current track"
      ).lengthOf(1)
    })

    it("displays the correct amount of upcoming tracks", async () => {
      const queueBar = render(QueueBarComponent)
      const { container } = queueBar

      const desiredAmount = Math.min(mockedTracks.length - 1, 20) // Current track takes one spot

      expect(
        container.querySelectorAll(TEST_ATTRIBUTES.asQuery.queueNextTracks)
      ).lengthOf(desiredAmount)
    })

    it("displays the upcoming tracks from the queue", async () => {
      const dom = render(QueueBarComponent)
      const nextTrackElements = dom.getByTestId(
        id.queueBarNextTracks
      ).childNodes

      expect(nextTrackElements.length).toBeGreaterThan(1)

      const $nextTracks = get(nextTracks)
      for (const [index, queueItem] of nextTrackElements.entries()) {
        expect(() =>
          queueItem.textContent?.includes(
            $nextTracks[index].track?.title ||
              $nextTracks[index].track.filepath.split("/").at(-1) ||
              "TS dont cry"
          )
        ).toBeTruthy()
      }
    })
  })

  describe("does", async () => {
    describe("play", async () => {
      it("switches to the track when it is double clicked", async () => {
        const component = render(QueueBarComponent)

        const currentTrackElement = component.getByTestId(id.queueCurrentTrack)
        const nextTrack = component.getByTestId(id.queueNextTrack)

        await fireEvent.doubleClick(nextTrack)

        const newPreviousTrack = component.getByTestId(id.queuePreviousTrack)
        const newCurrentTrackElement = component.getByTestId(
          id.queueCurrentTrack
        )
        const newNextTrack = component.getByTestId(id.queueNextTrack)

        expect(
          () => currentTrackElement.innerText === newPreviousTrack.innerText
        ).toBeTruthy()

        expect(
          () => nextTrack.innerText === newCurrentTrackElement.innerText
        ).toBeTruthy()

        expect(
          () => nextTrack.innerText !== newNextTrack.innerText
        ).toBeTruthy()
      })
    })

    describe("click delete queue item", async () => {
      it("removes queue item", async () => {
        const component = render(QueueBarComponent)

        const nextTrack = component.getByTestId(id.queueNextTrack)
        const deleteIcon = nextTrack.querySelector(
          TEST_ATTRIBUTES.asQuery.queueItemDeleteIcon
        )

        if (!deleteIcon) throw new Error("No delete icon found for queue item") // for typescript

        await fireEvent.click(deleteIcon)

        const newNextTrack = component.getByTestId(id.queueNextTrack)

        expect(nextTrack.textContent).not.toEqual(newNextTrack.textContent)
      })

      it("keeps the current track when already played items get removed", async () => {
        const component = render(QueueBarComponent)
        const oldNextTrack = component.getByTestId(id.queueNextTrack)

        await fireEvent.dblClick(oldNextTrack)

        const previousTrack = component.getByTestId(id.queuePreviousTrack)
        const deleteIcon = previousTrack.querySelector(
          TEST_ATTRIBUTES.asQuery.queueItemDeleteIcon
        )
        const oldCurrentTrack = component.getByTestId(id.queueCurrentTrack)

        if (!deleteIcon) throw new Error("No delete icon found")
        await fireEvent.click(deleteIcon)

        const newCurrentTrack = component.getByTestId(id.queueCurrentTrack)

        expect(newCurrentTrack.textContent).toBe(oldCurrentTrack.textContent)
      })

      it("goes to the next track if the current track gets deleted", async () => {
        const component = render(QueueBarComponent)
        const oldNextTrack = component.getByTestId(id.queueNextTrack)

        const oldCurrentTrack = component.getByTestId(id.queueCurrentTrack)
        const deleteIcon = oldCurrentTrack.querySelector(
          TEST_ATTRIBUTES.asQuery.queueItemDeleteIcon
        )

        if (!deleteIcon) throw new Error("No delete icon found for queue item")
        await fireEvent.click(deleteIcon)

        const newCurrentTrack = component.getByTestId(id.queueCurrentTrack)

        if (!oldNextTrack.textContent)
          throw new Error(
            `oldCurrentTrack.textContent should be text, but is${oldNextTrack.textContent}`
          )

        expect(newCurrentTrack.textContent).toMatch(oldNextTrack.textContent)
      })

      it("removes the correct track after current track has been deleted multiple times", async () => {
        const component = render(QueueBarComponent)

        const amountToRemove = 5

        for (let index = 0; index < amountToRemove; index += 1) {
          const oldCurrentTrack = component.getByTestId(id.queueCurrentTrack)
          const oldNextTrack = component.getByTestId(id.queueNextTrack)

          const deleteIcon = oldCurrentTrack.querySelector(
            TEST_ATTRIBUTES.asQuery.queueItemDeleteIcon
          )
          if (!deleteIcon)
            throw new Error("No delete icon found for queue item")
          await fireEvent.click(deleteIcon)

          const newCurrentTrack = component.getByTestId(id.queueCurrentTrack)

          expect(
            newCurrentTrack.textContent,
            `Failed at deletion: ${index + 1}`
          ).toBe(oldNextTrack.textContent)
        }
      })
    })

    it.todo(
      "reorders the queue when an item inside it is dragged within it",
      async () => {
        throw new Error("not implemented")
      }
    )

    it.todo(
      "does not change the queue when an item inside it is dragged outside it",
      async () => {
        throw new Error("not implemented")
      }
    )
  })
})

describe("behaves correctly when queue is empty", async () => {
  beforeEach(async () => {
    // Mock response to be empty and regenerate the import || clear its cache
    vitest
      .mocked(window.api.getTracks)
      .mockImplementation(async () => E.right([]))
    vitest.resetModules()

    QueueBarComponent = (await import(
      "@/lib/organisms/QueueBar.svelte"
    )) as unknown as typeof SvelteComponentDev
  })

  it("does not display items as already played", () => {
    const { container } = render(QueueBarComponent)

    const elements = container.querySelectorAll(
      TEST_ATTRIBUTES.queuePreviousTracks
    )

    expect(elements.length === 0).toBeTruthy()
  })

  it("does not display items as upcoming", async () => {
    const component = render(QueueBarComponent)

    const { container } = component

    const elements = container.querySelectorAll(TEST_ATTRIBUTES.queueNextTracks)

    expect(elements.length === 0).toBeTruthy()
  })

  it("does not display current playing", async () => {
    const component = render(QueueBarComponent)

    expect(() => component.getByTestId(id.queueCurrentTrack)).toThrowError(
      `Unable to find an element by: [data-testid="${id.queueCurrentTrack}"`
    )
  })
})
